package main //必须有一个main包

import (
	"fmt" //导入包后必须要使用
)

//go函数允许有多个返回值
func test() (a, b, c int) {
	return 1, 2, 3
}

func main() {
	//变量：运行期间可以改变的量
	/*
		1.声明格式：var 变量名  类型
		2.变量声明了必须要使用
		3.只是声明没有初始化的变量，默认值为0
		4.同一个{}里声明的变量名是唯一的
		5.可以同时声明多个变量
	*/
	var a int
	fmt.Println(a)
	var b, c int
	b = 10 //变量的赋值,赋值前必须声明
	c = b
	a = c
	fmt.Printf("a=%d  b=%d  c=%d \n", a, b, c)

	/*
		变量初始化：声明变量时，同时进行赋值
	*/
	var d int = 10 //声明时同时赋值为10
	fmt.Println(d)

	/*
		1.自动推导类型，必须初始化，通过初始化的值确定类型（常用）
		2.符号 ：= 自动推导类型，e:=20先声明变量e,再给e赋值
		3.自动推导，同一个变量名只能使用一次，用于初始化那次
	*/
	e := 30 //自动推导为int
	//%T打印变量所属的类型
	fmt.Printf("e type is %T  e=%d\n", e, e)

	/*
		多重赋值和匿名变量
	*/
	//多个变量同时定义和赋值
	a1, b1, c1 := 10, 20, 30
	fmt.Printf("a1 = %d  b1 = %d  c1 = %d \n", a1, b1, c1)
	//多重赋值，实现数据交换
	a1, b1, c1 = b1, c1, a1
	fmt.Printf("a1 = %d  b1 = %d  c1 = %d \n", a1, b1, c1)
	//_匿名变量，丢弃数据不处理，_匿名变量配合函数返回值使用才有优势
	a1, _, c1 = b1, c1, a1 //此处等号后面c1的值会被丢弃，不进行处理
	fmt.Printf("a1 = %d  b1 = %d  c1 = %d \n", a1, b1, c1)
	_, b1, _ = test() //只要中间的返回值，前后两个变量被丢弃
	fmt.Printf("a1 = %d  b1 = %d  c1 = %d \n", a1, b1, c1)

}
